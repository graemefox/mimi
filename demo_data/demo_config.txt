[config_file]
# Coniguration file for MiMi - Multi-Individual-Microsatellite-Identification - v0.02

###########################################################
# Amount of individuals sequenced:
number_of_samples = 5


###########################################################
# Proportion of individuals in which a microsatellite loci should occur (default 0.5)
proportion_of_individuals = 0.2

###########################################################
# Each Individual should have two input files: paths to "R1" and "R2" file in the
# following format:

# NOTE: if using relative paths, these need to be relative to the mimi.py script
# rather than the location of this config file.

# Two lines of example data to follow:
# input1_R1 = /path/to/fileX_R1.fastq
# input1_R2 = /path/to/fileX_R2.fastq

# Input your real data below:
input1_R1 =  demo_data/sequence_data/Sample1_R1.fastq
input1_R2 =  demo_data/sequence_data/Sample1_R2.fastq
input2_R1 =  demo_data/sequence_data/Sample2_R1.fastq
input2_R2 =  demo_data/sequence_data/Sample2_R2.fastq
input3_R1 =  demo_data/sequence_data/Sample3_R1.fastq
input3_R2 =  demo_data/sequence_data/Sample3_R2.fastq
input4_R1 =  demo_data/sequence_data/Sample4_R1.fastq
input4_R2 =  demo_data/sequence_data/Sample4_R2.fastq
input5_R1 =  demo_data/sequence_data/Sample5_R1.fastq
input5_R2 =  demo_data/sequence_data/Sample5_R2.fastq

###########################################################
# Prior to running MiMi, each individual should have been processed with pal_finder and the
# additional filtering and PANDAseq QC steps by Griffiths et al (unpublished)
# with the path to the output file given below in the following format:

# NOTE: if using relative paths, these need to be relative to the mimi.py script
# rather than the location of this config file.

# One line of example data to follow:
#pal_finder_output = /path/to/pal_finder_output.tabular

# Input your real data below:
input1_pal_finder = demo_data/pal_filter_output/Sample1_pal_filter_output.txt.csv
input2_pal_finder = demo_data/pal_filter_output/Sample2_pal_filter_output.txt.csv
input3_pal_finder = demo_data/pal_filter_output/Sample3_pal_filter_output.txt.csv
input4_pal_finder = demo_data/pal_filter_output/Sample4_pal_filter_output.txt.csv
input5_pal_finder = demo_data/pal_filter_output/Sample4_pal_filter_output.txt.csv

###########################################################

# NOTE: if using relative paths, these need to be relative to the mimi.py script
# rather than the location of this config file.


# Path to pal_finder_v0.02.04 script and config file:

pal_finder_path = demo_data/pal_finder_0.02.04/pal_finder_v0.02.04.pl
pal_finder_config = demo_data/pal_finder_0.02.04/config.txt


###########################################################
# If you would rather provide absolute paths to MUSCLE and PANDAseq executables,
# rather than include them in your $PATH. You can provide them here.
# (otherwise, leave these blank)

PANDAseq_exe = 
muscle_exe = a/broken/path


###########################################################
# Advanced filtering options
# This option allows you to change parameters for QC steps performed on the MiMi output
# Leave the defaults if you are not sure what these do.
# It has been configured to good 'general' settings for most marker developments

## This is a metric for how well aligned the multiple reads at a microsatellite locus must be
## The score is generated by how 'gappy' an alignment is, with relatively few gaps indicating a better alignment
## An average 'gap' score is taken below which an alignment must score if it is to pass the filter. Default value is 3

overall_alignment_qual_score = 3
